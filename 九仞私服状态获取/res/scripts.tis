/*
此文档为main窗口HTML文件的脚本文件
注释掉的代码，为调试时激活的代码
 */

/**

Global variable
全局变量区

**/
var serverInfo = {
    serverAddr:"localhost",
    serverPort: "25565"
}

var serverSelected = "";
var isRefresh=false;

/**

Window's event
前端窗口事件区

**/

event click $(#menu_table_cancelCheck)
{
    $(tr[state='checked']).attributes["state"] = "unchecked";
}

event click $(#menu_table_refresh)
{
    var addr = $(tr[state='checked']).attributes["value"].split(":");
    stdout.printf("%v\r\n",addr);
    view.DoTask(addr[0], addr[1], "T");
}

event click $(#serverInfo>tbody>tr)
{
    if($(tr[state='checked']) != #undefined)
    {
        $(tr[state='checked']).attributes["state"] = "unchecked";
    }
    serverSelected = this.attributes["value"];
    this.attributes["state"] = "checked";

    stdout.printf("%v %v\r\n", this.attributes["value"],self.$(tr[value='{serverSelected}']));
}

event click $(#menu_table_delete)
{
    if(serverSelected != "")
    {
        var nodeToDel = self.$(tr[state='checked']);
        nodeToDel.remove();
        serverSelected = "";
    }
}

event click $(#btnRefresh){
    view.DoTask($(#serverAddr).value, $(#serverPort).value, "T");
}

event click $(#btnAppend){
    serverInfo.serverAddr = $(#serverAddr).value;
    serverInfo.serverPort = $(#serverPort).value;
    view.DoTask($(#serverAddr).value, $(#serverPort).value, "F");
}
//var StatusHasChanged = false;
function self.ready() {
    var (sx, sy, sw, sh) = view.screenBox(#workarea,#rectw);
    var (w, h) = self.$(body);//.box(#dimension); // getting declared dimension
    w = 900;
    h = 600;
    stdout.println("width:" + w + " heigh :" + h);
    view.windowIcon = "./favicon.ico";
    view.windowResizable = false;
    view.move(sx + (sw - w) / 2, sy + (sh - h) / 2, w, h);//移动居中
}

self.on("complete",
    function () {
        movable();
        stdout.println("got complete");
        //view.DoTask($(#serverAddr).value,$(#serverPort).value);
        //self.timer(5s, ::CheckGetState());
        $(#EngineVer).text = String.printf("Sciter: %d.%d.%d.%d.%s",
            (Sciter.VERSION >> 16) & 0xffff, Sciter.VERSION & 0xffff,
            (Sciter.REVISION >> 16) & 0xffff, Sciter.REVISION & 0xffff, Sciter.BUILD.toString());
    });

/**

Window's Methods
前端方法区

**/

function GetJsonFieldFromJsonString(jsonStr, field) {
    //stdout.println("jsonstr:",jsonStr,"jsonField:",field);
    var v = JSON.parse(jsonStr);
    function formatVal(varval) {
        if (varval === null)
            return ("null", false);
        else if (varval === undefined)
            return ("undefined", false);
        switch (typeof varval) {
            case #boolean:
                return (varval.toString(), false);
            case #object:
                return (String.printf("%v", varval), #object);//其实还可以用JSON.stringify()函数来将varval转换成string
            case #array:
                return (String.printf("%v", varval), #array);
            case #date:
                return (varval.toISOString(), false);
            case #string:
            case #integer:
            case #float:
                return (JSON.stringify(varval), false);
            case #symbol:
                return (varval.toString(), false);
            default:
                return (varval.toString(), false);
        }
    }
    for (var (varname, varval) in v ) {
        if (varname == field) {
            var (caption, compound) = formatVal(varval);
            //stdout.println("varval:",String.printf("%v",varval), "JSON.stringify(varval):",JSON.stringify(varval));
            return String.printf("%v", varval);
        }
    }
    return "Can't find this field";
}

function GetMotdType(varval) {
    var v = JSON.parse(varval);
    var ret;
    try {
        ret = String.printf("%s", typeof (v.extra));
    }
    catch (e) {
        ret = "NULL";
    }
    return ret;
}

function TranslateExtraMotd(varval) {
    var v = JSON.parse(varval);
    var ret = "";
    for (var item in v.extra) {
        stdout.println(String.printf("<span style=\"color:%s;\">%s</span>", item.color, item.text));
        switch (item.color) {
            case "light_purple":
                ret += String.printf("<span style=\"color:%s;\">%s</span>", "#ff55ff", item.text);
                break;
            case "dark_green":
                ret += String.printf("<span style=\"color:%s;\">%s</span>", "#009600", item.text);
                break;
            default:
                ret += String.printf("<span style=\"color:%s;\">%s</span>", item.color, item.text);
                break;
        }
        if(item.text.search("\n") != -1)
        {
            ret += "<br/>"
        } 
    }
    return ret;
}

function DebugLog(s) {
    stdout.println(s);
}

function AddServerInfo(favicon, status, motd, online) {
    stdout.println(favicon, status, motd, online);
    var trValue = serverInfo.serverAddr + ":" + serverInfo.serverPort;
    var el = Element.create([tr: { value: trValue, role: "option" , state: "unchecked"}]);
    $(tbody).append(el);
    el.$append(<td><img src="{favicon}" /></td>);
    el.$append(<td>{status}</td>);
    el.$append(<td></td>).html = String.printf("<p>%s</p>", motd);
    el.$append(<td>{online}</td>);
}
/* val是要修改的服务器的地址，对应着该服务器在表格中的元素的value值,由于后端只可传四个参数过来，因此将val 与 online合并，用逗号隔开 */
function EditServerInfo(val, favicon, status, motd) {
    var online = val.toString().split(",")[1];
    val = val.toString().split(",")[0];
    var el = self.$(tr[value='{val}']);
    stdout.printf("%v %s %s %s %s\r\n", el, favicon, status, motd, online);
    stdout.printf("%s %s %s %s\r\n", el[0], el[1], el[2], el[3]);
    el[0].html = String.printf("<img src=\"%s\" />", favicon);
    el[1].html = status.toString();
    el[2].html = motd.toString();
    el[3].text = online.toString();
}

function movable() // install movable window handler
{
    var xoff, yoff;
    var dragging = false;
    var movableArea = $(body);
    stdout.print("MovableArea:");
    stdout.println($(body));
    function doDrag() {
        while (dragging) {
            var (x, y) = view.box(#position,#border,#screen);
            //stdout.printf("Border(x:%d,y:%d)",x,y);
            (x, y) = view.box(#position,#client,#screen);
            //stdout.printf(",Client(x:%d,y:%d)\n",x,y);
            view.doEvent();
        }
    }

    function onMouseDown(evt) {
        if (evt.target !== movableArea) return false;
        xoff = evt.x;
        yoff = evt.y;
        dragging = true;
        view.root.capture(true);
        doDrag();
        return true;
    }

    function onMouseMove(evt) {
        if (dragging) {
            view.move(evt.xScreen - xoff, evt.yScreen - yoff, true); // true - x,y are coordinates of the client area on the screen
            return true;
        }
        return false;
    }

    function stopDrag() {
        if (dragging) {
            dragging = false;
            view.root.capture(false);
            return true;
        }
        return false;
    }

    function onMouseUp(evt) {
        return stopDrag();
    }
    function onKeyDown(evt) {
        if (evt.keyCode == Event.VK_ESCAPE) return stopDrag();
    }

    // hookup event handlers:
    view.root.subscribe(onMouseDown, Event.MOUSE, Event.MOUSE_DOWN);
    view.root.subscribe(onMouseUp, Event.MOUSE, Event.MOUSE_UP);
    view.root.subscribe(onMouseMove, Event.MOUSE, Event.MOUSE_MOVE);
    view.root.subscribe(onKeyDown, Event.KEY, Event.KEY_DOWN);
    return false;
}
